<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Drush on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/drush/</link><description>Recent content in Drush on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 19 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/drush/index.xml" rel="self" type="application/rss+xml"/><item><title>Updating Digital.Grinnell (in Islandora) One More Time</title><link>https://static.grinnell.edu/dlad-blog/posts/137-updating-digital.grinnell-one-more-time.md/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/137-updating-digital.grinnell-one-more-time.md/</guid><description>&lt;p>Digital.Grinnell&amp;rsquo;s Islandora lifespan will most likely come to an end this year, or at least in the early part 2024. So, I&amp;rsquo;m adopting a new, lean and mean process for updating it from this point forward. Basically the process will involve backing up the code that&amp;rsquo;s already in place, then using &lt;code>drush up&lt;/code> to upgrade the Drupal modules and core if necessary.&lt;/p>
&lt;p>That process on January 19, 2023, went something like this&amp;hellip;&lt;/p>
&lt;h1 id="vsphere-snapshot">vSphere Snapshot&lt;/h1>
&lt;p>In case of catastrophic failure I first elected to open my VPN then a window into &lt;a href="https://vcenter.grinnell.edu">VMwareÂ® vSphere&lt;/a>. Once inside I took a &amp;ldquo;snapshot&amp;rdquo; of the &lt;em>DGDocker1&lt;/em> server to preserve as an emergency backup.&lt;/p></description></item><item><title>Debugging ISLE Local with PHPStorm</title><link>https://static.grinnell.edu/dlad-blog/posts/103-debugging-isle-local-with-phpstorm/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/103-debugging-isle-local-with-phpstorm/</guid><description>&lt;p>For the past couple of years I&amp;rsquo;ve been working in &lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a> to remove as much &amp;ldquo;customization&amp;rdquo; as I can. The effort is coming along, but still, there&amp;rsquo;s a long way to go. Every now and then I come across a feature that we just can&amp;rsquo;t live without, and it&amp;rsquo;s in times like those that I turn to &lt;a href="https://www.jetbrains.com/phpstorm/">PHPStorm&lt;/a> for development and testing. Unfortunately, I&amp;rsquo;ve been operating without &lt;em>PHPStorm&lt;/em> in &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE">ISLE&lt;/a> because I worried that configuring the &lt;em>PHPStorm&lt;/em> debugger in a Docker environment would be a time-consuming, tall task. It &lt;strong>was&lt;/strong> tricky, but worry no more!&lt;/p></description></item></channel></rss>