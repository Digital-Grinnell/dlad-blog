<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ISLE on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/isle/</link><description>Recent content in ISLE on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 19 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/isle/index.xml" rel="self" type="application/rss+xml"/><item><title>Updating Digital.Grinnell (in Islandora) One More Time</title><link>https://static.grinnell.edu/dlad-blog/posts/137-updating-digital.grinnell-one-more-time.md/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/137-updating-digital.grinnell-one-more-time.md/</guid><description>Digital.Grinnell&amp;rsquo;s Islandora lifespan will most likely come to an end this year, or at least in the early part 2024. So, I&amp;rsquo;m adopting a new, lean and mean process for updating it from this point forward. Basically the process will involve backing up the code that&amp;rsquo;s already in place, then using drush up to upgrade the Drupal modules and core if necessary.
That process on January 19, 2023, went something like this&amp;hellip;
vSphere Snapshot In case of catastrophic failure I first elected to open my VPN then a window into VMwareÂ® vSphere.</description></item><item><title>Rebuilding ISLE for Digital.Grinnell</title><link>https://static.grinnell.edu/dlad-blog/posts/125-rebuiding-isle-for-digital.grinnell/</link><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/125-rebuiding-isle-for-digital.grinnell/</guid><description>This blog post will be used to chronicle a process I&amp;rsquo;m using to rebuild Digital.Grinnell in Legacy Islandora using ISLE. This process was triggered by ITS&amp;rsquo; intent to move DG&amp;rsquo;s FEDORA repository to a new server. That new server is currently mounted on node DGDockerX, my staging server, as /mnt/datastage and it contains a copy of DG&amp;rsquo;s production FEDORA repository made on or about June 15, 2020.
PORTABLE-DG For starters I&amp;rsquo;m going be doing lots of &amp;ldquo;local&amp;rdquo; ISLE work up-front so I&amp;rsquo;m creating a USB drive backup/copy of /mnt/datastage.</description></item><item><title>Updating Digital.Grinnell to ISLE v1.5.11</title><link>https://static.grinnell.edu/dlad-blog/posts/111-updating-isle-v1.5.11/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/111-updating-isle-v1.5.11/</guid><description>Attention: This is an updated copy of post 107 gleaned from the ISLE project&amp;rsquo;s update.md document. ONLY the headings from the original document and the annotations which are specific to Digital.Grinnell appear in this document!
Note: This update procedure was NOT performed &amp;ldquo;locally&amp;rdquo;, as recommended, due to substantial errors encountered in my last attempt to update. Rather than diving down that rabbit hole, again, I elected to attempt this update on our staging server, DGDockerX on 2021-Sep-27.
Update ISLE to the Latest Release Important Information # stop the docker service $ sudo service docker stop # download the latest docker binary and replace the current outdated docker # DEPRECATED WAY TO UPGRADE DOCKER: $ sudo wget https://get.</description></item><item><title>Updating Digital.Grinnell in ISLE</title><link>https://static.grinnell.edu/dlad-blog/posts/107-updating-digital-grinnell-in-isle/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/107-updating-digital-grinnell-in-isle/</guid><description>Attention: This is an annotated copy of the ISLE project&amp;rsquo;s update.md document. Annotations specific to Digital.Grinnell appear in specially formatted blocks like this one
There was one universal change made here in the original text, specifically all references to master branches have been changed to main to correlate with updated names of the repositories involved in this process.
Note: This update procedure was first performed &amp;ldquo;locally&amp;rdquo;, as recommended on 2021-June-22 when I attempted it on my Grinnell College MacBook Pro, MA10713, serial number C02FK0XXQ05Q.</description></item><item><title>Debugging ISLE Local with PHPStorm</title><link>https://static.grinnell.edu/dlad-blog/posts/103-debugging-isle-local-with-phpstorm/</link><pubDate>Wed, 17 Mar 2021 08:39:33 -0500</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/103-debugging-isle-local-with-phpstorm/</guid><description>For the past couple of years I&amp;rsquo;ve been working in Digital.Grinnell to remove as much &amp;ldquo;customization&amp;rdquo; as I can. The effort is coming along, but still, there&amp;rsquo;s a long way to go. Every now and then I come across a feature that we just can&amp;rsquo;t live without, and it&amp;rsquo;s in times like those that I turn to PHPStorm for development and testing. Unfortunately, I&amp;rsquo;ve been operating without PHPStorm in ISLE because I worried that configuring the PHPStorm debugger in a Docker environment would be a time-consuming, tall task.</description></item><item><title>Git Submodule Workflow in ISLE</title><link>https://static.grinnell.edu/dlad-blog/posts/098-git-submodule-workflow-in-isle/</link><pubDate>Mon, 07 Dec 2020 18:23:02 -0600</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/098-git-submodule-workflow-in-isle/</guid><description>In the past few days I&amp;rsquo;ve attempted to update the &amp;ldquo;staging&amp;rdquo; copy of Digital.Grinnell at https://dg-staging.grinnell.edu and learned a valuable lesson regarding workflow around Git and submodules. Specifically, I found the following resource to be most helpful:
https://intellipaat.com/community/9971/git-update-submodule-to-latest-commit-on-origin In case that post ever disappers, here&amp;rsquo;s the gist of it&amp;hellip;
The git submodule update command actually tells git that you simply want your submodules to each check out the commit already mentioned in the index of the superproject.
If you want to update your submodules to the most recent commit available from their remote, you&amp;rsquo;ll try this directly within the submodules.</description></item><item><title>Production ISLE Installation: Migrate Existing Islandora Site - with Annotations</title><link>https://static.grinnell.edu/dlad-blog/posts/096-production-isle/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/096-production-isle/</guid><description>This post is an addendum to earlier post 092. It is intended to chronicle my efforts to complete migration of our production instance of Digital.Grinnell from ISLE v1.1 to ISLE v1.5.1 on Linux node DGDocker1.grinnell.edu. The remainder of this document is an annotated copy of Production ISLE Installation: Migrate Existing Islandora Site.
Annotations, with information specific to my experience with Digital.Grinnell migration, appear in text blocks like this one.
Production ISLE Installation: Migrate Existing Islandora Site Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation.</description></item><item><title>Compact Build of dg.localdomain - Concise Instructions</title><link>https://static.grinnell.edu/dlad-blog/posts/094-compact-build-of-dg.localdomain/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/094-compact-build-of-dg.localdomain/</guid><description>This post is an addendum to an earlier post, Local ISLE Installation: Migrate Existing Islandora Site - with Annotations, where I exhaustively documented my workflow for building a local/development instance of ISLE to mimic the behavoir of Digital.Grinnell.
Goal The goal of this project is to present a repeatable, minimal set of instructions for spinning up a safe, stand-alone, local/development instance of ISLE on any Mac running OS X.
Prerequisites This document assumes the user will be spinning up https://dg.localdomain on a Mac with a suitable DG-FEDORA USB stick mounted and accessible.</description></item><item><title>Traefik and Acme.sh for DG-STAGING</title><link>https://static.grinnell.edu/dlad-blog/posts/093-traefik-and-acme.sh-for-dg-staging/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/093-traefik-and-acme.sh-for-dg-staging/</guid><description>This post is a follow-up to Dockerized Traefik Host Using ACME DNS-01 Challenge and Staging ISLE Installation: Migrate Existing Islandora Site - with Annotations, specifically Step 11 in the later document. It introduces a Digital.Grinnell-specific implementation of the Traefik with Acme.sh.
Testing with McFateM/docker-traefik2-acme-host I started work on this implementation with a test, by cloning https://github.com/McFateM/docker-traefik2-acme-host and proceeding as directed in the repository&amp;rsquo;s README.md document, as user islandora on node DGDockerX, like so:
DGDockerX Host Commands cd ~ git clone https://github.</description></item><item><title>Staging ISLE Installation: Migrate Existing Islandora Site - with Annotations</title><link>https://static.grinnell.edu/dlad-blog/posts/092-staging-isle/</link><pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/092-staging-isle/</guid><description>Attention: Take note that annotations stop where my process departed from this script in Step 16. Enter at your own risk beyond the annotation in Step 16!
This post is an addendum to earlier posts 087 and 090. It is intended to chronicle my efforts to migrate to a staging instance of Digital.Grinnell on Linux node DGDockerX.grinnell.edu. The remainder of this document is an annotated copy of Staging ISLE Installation: Migrate Existing Islandora Site.
Annotations, with information specific to my experience with Digital.</description></item><item><title>Local ISLE Installation: Migrate Existing Islandora Site - One-Time Customizations</title><link>https://static.grinnell.edu/dlad-blog/posts/090-isle-local-migration-customization/</link><pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/090-isle-local-migration-customization/</guid><description>This post is an addendum to earlier post 087. It is intended to chronicle my customization efforts, necessary steps that follow the aforementioned document&amp;rsquo;s Step 11, to migrate to a local development instance of Digital.Grinnell on my work-issued iMac, MA8660, currently identified as MAD25W812UJ1G9. Please refer to Steps 0 - 11 in post 087 for background info.
Note that it should NOT be necessary to repeat steps taken in this document. Pertinent changes made herein were saved into a new completed-install-local-migrate branch of my dg-islandora project repository, effectively capturing all progress made within.</description></item><item><title>Local ISLE Installation: Migrate Existing Islandora Site - with Annotations</title><link>https://static.grinnell.edu/dlad-blog/posts/087-rebuilding-isle-ld-again/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/087-rebuilding-isle-ld-again/</guid><description>This post is an addendum to earlier posts 021 and 058, with simiar titles. It is intended to chronicle my efforts to migrate to a local development instance of Digital.Grinnell on my work-issued iMac, MA8660, currently identified as MAD25W812UJ1G9.
Goal The goal of this project is once again to spin up a local Islandora stack using the ISLE project following the guidance of the project&amp;rsquo;s install-local-migrate document. My process will be slightly different than documented since I&amp;rsquo;ve already created a pair of private dg-isle and dg-islandora repositories.</description></item><item><title>Staging Digital.Grinnell (DG) on DigitalOcean (DO)</title><link>https://static.grinnell.edu/dlad-blog/posts/062-testing-dg-staging-on-digitalocean/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/062-testing-dg-staging-on-digitalocean/</guid><description>ISLE v1.3.0 has been running on my staging server, DGDockerX, for months now and it seems to be performing as-expected with one exception&amp;hellip; when I try to import a batch of objects using IMI, the Islandora Multi-Importer, I get the following error:
The website encountered an unexpected error. Please try again later. Examinations of Recent log messages seem to point to DNS issues that I&amp;rsquo;m unable to overcome because I have no control over our DNS records, campus networking, or firewalls.</description></item><item><title>ISLE Workflow Test</title><link>https://static.grinnell.edu/dlad-blog/posts/060-isle-workflow-test/</link><pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/060-isle-workflow-test/</guid><description>ISLE v1.3.0 has been running on my staging server, DGDockerX, for about 6 weeks now and it seems to be performing as-expected with one exception&amp;hellip; when I try to import a batch of objects using IMI, the Islandora Multi-Importer, I get the following error:
The website encountered an unexpected error. Please try again later. An examination of Recent log messages shows&amp;hellip;
GuzzleHttp\Exception\ConnectException: cURL error 6: Could not resolve host: sheets.googleapis.com (see https://curl.haxx.se/libcurl/c/libcurl-errors.html) in GuzzleHttp\Handler\CurlFactory::createRejection() (line 200 of /var/www/html/sites/all/modules/islandora/islandora_multi_importer/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php). Engaging the Local Workflow Since I&amp;rsquo;m not at all sure what&amp;rsquo;s wrong, I feel like I need to rewind my process a bit and try to reproduce the same configuration, and error, on a local instance of this ISLE stack.</description></item><item><title>Pushing ISLE to Staging</title><link>https://static.grinnell.edu/dlad-blog/posts/059-pushing-isle-to-staging/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/059-pushing-isle-to-staging/</guid><description>This post chronicles the steps I took to push my local dg.localdomain project, an ISLE v1.3.0 build, to staging on node DGDockerX as https://isle-stage.grinnell.edu using my dg-isle and dg-islandora repositories.
Directories I&amp;rsquo;ll begin by opening a terminal on the staging host, DGDockerX as user islandora. Then I very carefully (note the use of the --recursive flags!) clone the aforementioned projects to DGDockerX like so:
Host / DGDockerX Commands cd /opt git clone &amp;ndash;recursive https://github.com/Digital-Grinnell/dg-isle.git git clone &amp;ndash;recursive https://github.com/Digital-Grinnell/dg-islandora.git cd dg-isle git checkout staging One Useful Git Config Change One thing I learned during this process is that all of the dg-isle config files that Iâve modified and/or mapped into the containers show up as âmodifiedâ when I do a git status on the host.</description></item><item><title>Rebuilding ISLE-ld (for Local Development)</title><link>https://static.grinnell.edu/dlad-blog/posts/058-rebuilding-isle-ld/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/058-rebuilding-isle-ld/</guid><description>This post replaces my earlier post 021 with the same title. It is intended to chronicle my efforts to build a new ISLE v1.3.0 local development instance of Digital.Grinnell on my work-issued MacBook Air, MA7053.
Goal The goal of this project is to spin up a pristine, local Islandora stack using the ISLE project at https://github.com/Digital-Grinnell/dg-isle/, then introduce elements like the Digital Grinnell theme and custom modules like DG7. Once these pieces are in-place and working, I&amp;rsquo;ll begin adding other critical components as well as a robust set of data gleaned from https://digital.</description></item><item><title>Granular ISLE Customization: Install 'Backup and Migrate'</title><link>https://static.grinnell.edu/dlad-blog/posts/057-granular-isle-customization-instal-backup-and-migrate/</link><pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/057-granular-isle-customization-instal-backup-and-migrate/</guid><description>Granular ISLE Customization This post is part of a series describing Digital.Grinnell customizations to ISLE, in a &amp;ldquo;granular&amp;rdquo; format&amp;hellip; one small customization at a time. An index of all documents in this series is included at the end of Granular ISLE Customization: Series Guidelines. Goal Statement In this &amp;ldquo;granular&amp;rdquo; post we will install Backup and Migrate, a tremendous Drupal module that I use extensively for backup, restoration, migration and maintenance of Digital.Grinnell.
Install and Enable the Backup and Migrate Module using Drush DG7 is installed and enabled in the same manner as most Drupal or Islandora contrib modules, like so:</description></item><item><title>DG's ISLE Git Workflow</title><link>https://static.grinnell.edu/dlad-blog/posts/053-dgs-isle-git-workflow/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/053-dgs-isle-git-workflow/</guid><description>For some time now Digital.Grinnell has been using ISLE in production, with an instance that was built from a &amp;ldquo;non-standard&amp;rdquo; workflow, one that was a little different than the Git workflow established in the ISLE install docs. Consequently, DG&amp;rsquo;s situation is a little different than what&amp;rsquo;s documented for ISLE, so my mission here is to describe and execute the steps I&amp;rsquo;m taking to get back into the documented workflow.
The steps will involve and achieve the following:
Establish a working, local instance of my production DG site with an ISLE-1.</description></item><item><title>Granular ISLE Customization: Installing the DG Theme</title><link>https://static.grinnell.edu/dlad-blog/posts/052-granular-isle-customization-installing-the-dg-theme/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/052-granular-isle-customization-installing-the-dg-theme/</guid><description>Granular ISLE Customization This post is part of a series describing Digital.Grinnell customizations to ISLE, in a &amp;ldquo;granular&amp;rdquo; format&amp;hellip; one small customization at a time. An index of all documents in this series is included at the end of Granular ISLE Customization: Series Guidelines. Goal Statement In this &amp;ldquo;granular&amp;rdquo; post we will install Digital.Grinnell&amp;rsquo;s custom-built theme, namely digital_grinnell_bootstrap. The experience documented here involves an existing ISLE instance created using Building ISLE 1.3.0 (ld) for Local Development.
Commands The install and config process was simply this stream of commands entered directly into the running Apache container:</description></item><item><title>Migrating Digital.Grinnell (DG) to ISLE 1.3.0 (ld) for Local Development</title><link>https://static.grinnell.edu/dlad-blog/posts/051-migrating-dg-to-isle-1.3.0-ld/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/051-migrating-dg-to-isle-1.3.0-ld/</guid><description>This is a follow-up to previous posts 034, Building ISLE 1.2.0 (ld) and 037, Migrating Digital.Grinnell (DG) to ISLE 1.2.0 (ld) for Local Development where I successfully completed a &amp;ldquo;local&amp;rdquo; build of ISLE v1.2.0 and subsequently started &amp;ldquo;customization&amp;rdquo; of that local instance. So, this post&amp;rsquo;s intent is to complete the goal stated in Migrating Digital.Grinnell (DG) to ISLE 1.2.0 (ld) for Local Development, but for ISLE 1.3.0, specifically to:
The goal of this project is to spin up a pristine, local Islandora stack using an updated fork of the ISLE project at https://github.</description></item><item><title>Granular ISLE Customization: Installing DG7</title><link>https://static.grinnell.edu/dlad-blog/posts/050-granular-isle-customization-installing-dg7/</link><pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/050-granular-isle-customization-installing-dg7/</guid><description>Warning! The DG7 module contains code with numerous dependencies, and the most sinister of these is a Grinnell-specific version of the Solr schema. Do NOT attempt to use this module early in a stack-building process, nor outside the Digital.Grinnell environment. Granular ISLE Customization This post is part of a series describing Digital.Grinnell customizations to ISLE, in a &amp;ldquo;granular&amp;rdquo; format&amp;hellip; one small customization at a time. An index of all documents in this series is included at the end of Granular ISLE Customization: Series Guidelines.</description></item><item><title>Granular ISLE Customization: Implementing IMI Hooks</title><link>https://static.grinnell.edu/dlad-blog/posts/049-granular-isle-customization-implementing-imi-hooks/</link><pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/049-granular-isle-customization-implementing-imi-hooks/</guid><description>Granular ISLE Customization This post is part of a series describing Digital.Grinnell customizations to ISLE, in a &amp;ldquo;granular&amp;rdquo; format&amp;hellip; one small customization at a time. An index of all documents in this series is included at the end of Granular ISLE Customization: Series Guidelines. Goal Statement In this &amp;ldquo;granular&amp;rdquo; post I&amp;rsquo;ll introduce two customizations to IMI that implement and engage Drupal &amp;ldquo;hook&amp;rdquo; functions, namely:
hook_islandora_multi_importer_remote_file_get(), and hook_form_islandora_multi_importer_form_alter(). Drupal 7 Hooks See Understanding the hook system for Drupal modules to better understand what Drupal v7 hook functions are, and how they work.</description></item><item><title>Granular ISLE Customization: Installing IMI</title><link>https://static.grinnell.edu/dlad-blog/posts/048-granular-isle-customization-installing-imi/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/048-granular-isle-customization-installing-imi/</guid><description>Granular ISLE Customization This post is part of a series describing Digital.Grinnell customizations to ISLE, in a &amp;ldquo;granular&amp;rdquo; format&amp;hellip; one small customization at a time. An index of all documents in this series is included at the end of Granular ISLE Customization: Series Guidelines. Goal Statement In this &amp;ldquo;granular&amp;rdquo; post we will install IMI, the Islandora Multi-Importer module, into an existing ISLE instance, for example: https://dg.localdomain/.
Install the Islandora Multi-Importer (IMI) It&amp;rsquo;s important that we take this step BEFORE other customizations, otherwise the module may not install properly.</description></item><item><title>Granular ISLE Customization: Series Guidelines</title><link>https://static.grinnell.edu/dlad-blog/posts/047-granular-isle-customizations-the-series/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/047-granular-isle-customizations-the-series/</guid><description>Granular ISLE Customization This post provides guidelines for a series of posts describing Digital.Grinnell customizations to ISLE, in a &amp;ldquo;granular&amp;rdquo; format&amp;hellip; one small customization at a time. Using the Granular ISLE Customization Posts There are just a couple of notes regarding the subject posts that I&amp;rsquo;d like to pass along to make them more useful.
Gists - You will find a few places in this series where I generated a gist to take the place of lengthy command output. Instead of a long stream of text you&amp;rsquo;ll find a simple link to a gist like this.</description></item><item><title>Building My `dg-islandora` Code Repository</title><link>https://static.grinnell.edu/dlad-blog/posts/038-building-my-dg-islandora-code-repository/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/038-building-my-dg-islandora-code-repository/</guid><description>As promised in post 037, this post combines elements of post 021 with updated post 034 to create a &amp;ldquo;customized&amp;rdquo; local ISLE instance with features of Digital.Grinnell. In this November 2019 update I&amp;rsquo;m building the repository on my MacBook ma7053 using ISLE-1.3.0. The target of this endeavor will be a properly populated Digital.Grinnell custom Islandora code repository featuring ISLE-1.3.0 code.
Process Overview I believe the process I need to engage here can be outlined like this:
Repeat or follow-up on post 034.</description></item><item><title>Migrating Digital.Grinnell (DG) to ISLE 1.2.0 (ld) for Local Development</title><link>https://static.grinnell.edu/dlad-blog/posts/037-migrating-dg-to-isle-1.2.0-ld/</link><pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/037-migrating-dg-to-isle-1.2.0-ld/</guid><description>This post is a follow-up to previous post 034 where I successfully completed a &amp;ldquo;local&amp;rdquo; build of ISLE v1.2.0, but did no &amp;ldquo;customization&amp;rdquo; of that local instance. So, this post&amp;rsquo;s intent is to complete the goal stated in post 034, specifically to:
The goal of this project is to spin up a pristine, local Islandora stack using an updated fork of the ISLE project at https://github.com/DigitalGrinnell/dg-isle, then introduce elements like the Digital Grinnell theme and custom modules like DG7. Once these pieces are in-place and working, I&amp;rsquo;ll begin adding other critical components as well as a robust set of data gleaned from https://digital.</description></item><item><title>Building ISLE 1.3.0 (ld) for Local Development</title><link>https://static.grinnell.edu/dlad-blog/posts/034-building-isle-1.3.0-ld/</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/034-building-isle-1.3.0-ld/</guid><description>This post, an updated (the original was written in August 2019 for ISLE-1.2.0) follow-up to a previous post is intended to chronicle my efforts to build a new ~ISLE v1.2.0~ ISLE-1.3.0, ld, or local development, instance of Digital.Grinnell on my work-issued MacBook, ma7053.
Goal Statement The goal of this project is to spin up a pristine, local Islandora stack using an updated fork of the ISLE project at https://github.com/Digital-Grinnell/dg-isle, then introduce elements like the Digital Grinnell theme and custom modules like DG7.</description></item><item><title>Mounting //STORAGE for IMI Ingest in Digital.Grinnell</title><link>https://static.grinnell.edu/dlad-blog/posts/028-mounting-storage-for-imi-ingest-in-digital-grinnell/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/028-mounting-storage-for-imi-ingest-in-digital-grinnell/</guid><description>Claiming another small victory today! Why? Well, the Digital.Grinnell instance of IMI (Islandora Multi-Importer) module is customized so that choosing &amp;ldquo;*local&amp;rdquo; as an object ingest source invokes a hook function I created in our DG7 module. That hook enables IMI to &amp;ldquo;find&amp;rdquo; named files/content (things like PDFs, images, etc.) in the Grinnell College //STORAGE server. //STORAGE can be mounted as a CIFS (Common Internet File System) and used to drive ingest if the right package/drivers are made available to Islandora. That can be a little tricky in ISLE, but it&amp;rsquo;s manageable.</description></item><item><title>Missing Oral History Transcripts in DG - Fixed</title><link>https://static.grinnell.edu/dlad-blog/posts/026-oral-history-solr-fix/</link><pubDate>Fri, 19 Jul 2019 13:09:54 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/026-oral-history-solr-fix/</guid><description>I recently constructed a new, local/development instance of ISLE (see my previous post) largely in order to debug a mystery in Digital.Grinnell&amp;rsquo;s display of oral histories. My Trello card for the issue reads:
Our newest AOH entries, and some older objects, will not display a transcript after upgrade to the latest version of the OH module. OHScribe is needed to aid in re-processing transcripts for these objects, and some XDebug work will also be required.
Engaging XDebug and PHPStorm allowed me to peek inside the relatively complex oral histories (OH) module where I found that some of our OH objects were missing key Solr field elements, like or_transcripts and or_speaker.</description></item><item><title>Debugging PHP in ISLE: a Kludge</title><link>https://static.grinnell.edu/dlad-blog/posts/025-kludge-debugging-isle/</link><pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/025-kludge-debugging-isle/</guid><description>In an earlier post I chronicle the exhaustive steps taken to create a &amp;ldquo;debuggable&amp;rdquo; local/development instance of Digital.Grinnell that behaves exactly like the real thing, except with a much smaller, portable FEDORA repository under it. I&amp;rsquo;m claiming success on that front, but there is one glaring kludge in the process that I have yet to work out.
The Kludge So, my debugging of an ISLE stack involves the coordinated configuration and engagement of XDebug inside the Apache container, and PHPStorm, along with persistence of the stack&amp;rsquo;s PHP codebase&amp;hellip; and therein lies the rub.</description></item><item><title>Debugging ISLE-ld (Local Development) in PHPStorm</title><link>https://static.grinnell.edu/dlad-blog/posts/023-debugging-isle-ld-in-phpstorm/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/023-debugging-isle-ld-in-phpstorm/</guid><description>Debugging ISLE on a Mac This guidance applies to debugging PHP code in a local ISLE-ld, that&amp;rsquo;s http://isle.localdomain, instance using PHPStorm.
Modify ISLE&amp;rsquo;s docker-compose.override.yml Before engaging PHPStorm we need to make one change to our ISLE-ld configuration by running a docker cp command, making a change to our docker-compose.override.yml file, and restarting the stack. Here are the commands and procedure.
Workstation Commands cd ~/Projects/ISLE mkdir -p persistent/html docker cp isle-apache-ld:/var/www/html/. ./persistent/html The above commands will make a new ./persistent/html directory on the host, if one does not already exist, and the docker cp command will copy the current contents of the Apache container&amp;rsquo;s /var/www/html directory to the host.</description></item></channel></rss>