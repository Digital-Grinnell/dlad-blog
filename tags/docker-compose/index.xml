<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker-compose on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/docker-compose/</link><description>Recent content in docker-compose on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 15 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/docker-compose/index.xml" rel="self" type="application/rss+xml"/><item><title>Traefik and Acme.sh for DG-STAGING</title><link>https://static.grinnell.edu/dlad-blog/posts/093-traefik-and-acme.sh-for-dg-staging/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/093-traefik-and-acme.sh-for-dg-staging/</guid><description>This post is a follow-up to Dockerized Traefik Host Using ACME DNS-01 Challenge and Staging ISLE Installation: Migrate Existing Islandora Site - with Annotations, specifically Step 11 in the later document. It introduces a Digital.Grinnell-specific implementation of the Traefik with Acme.sh.
Testing with McFateM/docker-traefik2-acme-host I started work on this implementation with a test, by cloning https://github.com/McFateM/docker-traefik2-acme-host and proceeding as directed in the repository&amp;rsquo;s README.md document, as user islandora on node DGDockerX, like so:
DGDockerX Host Commands cd ~ git clone https://github.</description></item><item><title>New Host Config: Vulnerability Scan</title><link>https://static.grinnell.edu/dlad-blog/posts/081-new-host-config-vulnerability-scan/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/081-new-host-config-vulnerability-scan/</guid><description>Today I elected to run a vulnerability scan against our new instance of the docker-traefik2-acme-host configuration that&amp;rsquo;s running on static.grinnell.edu. The command I used, and the results, are posted below.
╭─islandora@dgdockerx ~ ╰─$ /home/islandora/testssl.sh/testssl.sh static.grinnell.edu ########################################################### testssl.sh 3.0rc4 from https://testssl.sh/dev/ This program is free software. Distribution and modification under GPLv2 permitted. USAGE w/o ANY WARRANTY. USE IT AT YOUR OWN RISK! Please file bugs @ https://testssl.sh/bugs/ ########################################################### Using &amp;quot;OpenSSL 1.0.2-chacha (1.0.2k-dev)&amp;quot; [~183 ciphers] on dgdockerx:/home/islandora/testssl.sh/bin/openssl.Linux.x86_64 (built: &amp;quot;Jan 18 17:12:17 2019&amp;quot;, platform: &amp;quot;linux-x86_64&amp;quot;) Start 2020-06-11 17:33:25 --&amp;gt;&amp;gt; 132.</description></item><item><title>Host Config: docker-traefik2-acme-host</title><link>https://static.grinnell.edu/dlad-blog/posts/080-host-config-docker-traefik2-acme-host/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/080-host-config-docker-traefik2-acme-host/</guid><description>This post is celebrating the completion (really, is anything ever complete?) of a new server/host/stack deployment project: docker-traefik2-acme-host. In order to make this post really easy to read, I&amp;rsquo;m going to wrap it up in one bullet&amp;hellip;
README.md Troubleshooting Should you ever encounter an error like the one below, be sure to ask your IT provider if they created the proper CNAME record when creating your DNS entry.
[Tue Jun 30 20:53:50 UTC 2020] ohscribe.grinnell.edu:Verify error:DNS problem: NXDOMAIN looking up TXT for _acme-challenge.</description></item><item><title>Traefik and Acme.sh Instead of DNS-01</title><link>https://static.grinnell.edu/dlad-blog/posts/079-traefik-and-acme.sh-instead-of-dns-01/</link><pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/079-traefik-and-acme.sh-instead-of-dns-01/</guid><description>This post is a follow-up to Dockerized Traefik Host Using ACME DNS-01 Challenge. It introduces an alternative to the failed process that was proposed in that earlier post.
Note that the following config-specific elements have been replaced below:
6 occurances of ?.grinnell.edu now say example-1.grinnell.edu, and 2 occurances of ?.info now say example-2.info. New Proposal On June 1 my colleage, Matt, suggested the following&amp;hellip;
As much as I would like to resolve the DNS-01 challenge using Traefik alone, I don&amp;rsquo;t believe it will support what we&amp;rsquo;re trying to do here.</description></item><item><title>Simplified Testing of Traefik 2 with ACME DNS-01 Challenge</title><link>https://static.grinnell.edu/dlad-blog/posts/074-simplified-testing-traefik-2-with-acme-dns-01/</link><pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/074-simplified-testing-traefik-2-with-acme-dns-01/</guid><description>This post is a simplified and focused follow-up to Dockerized Traefik Host Using ACME DNS-01 Challenge.
Simplify Today, 19-May-2020, I&amp;rsquo;m going to take a shot at simplifying my testing on dgdocker3.grinnell.edu by removing unnecessary things and consolidating as much as possible to reduce clutter in the logs and get right to the point. I&amp;rsquo;m also going to have a look to see if there are additional logs that can tell give me more detail. Everything used here, and everything that takes place here, will be found in a new directory, /opt/containers/test on DGDocker3.</description></item><item><title>Dockerized Traefik Host Using ACME DNS-01 Challenge</title><link>https://static.grinnell.edu/dlad-blog/posts/071-dockerized-traefik-using-acme-dns-01/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/071-dockerized-traefik-using-acme-dns-01/</guid><description>This post builds on My dockerized-server Config and attempts to change what was a problematic ACME HTTP-01 or httpChallenge in Traefik and Let&amp;rsquo;s Encrypt to an ACME DNS-01 or dnsChallenge. The problem with the old HTTP-01 or httpChallenge is that it requires the creation of a valid and widely accessible &amp;ldquo;A&amp;rdquo; record in our DNS before the creation of a cert; the record has to be in place so that the Let&amp;rsquo;s Encrypt CA-server can find it to confirm that the request is valid.</description></item><item><title>Repairing Static.Grinnell.edu</title><link>https://static.grinnell.edu/dlad-blog/posts/045-repairing-static.grinnell.edu/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/045-repairing-static.grinnell.edu/</guid><description>This morning, Tuesday, September 17, 2019, I awoke to find our https://static.grinnell.edu server, and all of the services on it, unreachable via the web. I managed to open a shell on the host and found that the server was up-and-running as expected, but a quick docker ps command indicated that one of the key services on the server, namely Traefik, had stopped and then failed to restart, repeatedly. Traefik is the service that&amp;rsquo;s responsible for routing web traffic on the static host.</description></item><item><title>DG-FEDORA: A Portable FEDORA Repository</title><link>https://static.grinnell.edu/dlad-blog/posts/046-dg-fedora-a-portable-object-repository/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/046-dg-fedora-a-portable-object-repository/</guid><description>Teaser Late last night (don&amp;rsquo;t ask how late it was) I discovered a really slick trick, aka &amp;ldquo;feature&amp;rdquo;, of docker-compose. Full disclosure: I love docker-compose &amp;ldquo;overrides&amp;rdquo;, a feature I found a couple of months ago. However, implementing overrides in a granular fashion, as I&amp;rsquo;d like, and within a docker-compose hierarchy of environments like the ISLE stack, can be difficult and counter-productive. I may have found a workable compromise last night. If you&amp;rsquo;re interested, please, read on&amp;hellip;
History About a year ago I created a &amp;ldquo;portable&amp;rdquo; FEDORA object repository &amp;ldquo;on a stick&amp;rdquo;, a USB stick.</description></item><item><title>Building Grocy in Docksal</title><link>https://static.grinnell.edu/dlad-blog/posts/036-building-grocy-in-docksal/</link><pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/036-building-grocy-in-docksal/</guid><description>Grocy looks lika a great little PHP stack application for me. It&amp;rsquo;s aim is to help folks organize and inventory their &amp;ldquo;stuff&amp;rdquo;, with a slant toward food and groceries. I need this!
Since I&amp;rsquo;m also a big fan of Docker and Docksal, naturally I wanted to spin Grocy up in one of these environments. Thankfully, the heavy lifting of getting this &amp;ldquo;Dockerized&amp;rdquo; has already been done, and that fine work is shared in GitHub at grocy/grocy-docker. So my quest last evening started with a fork of this GitHub project to SummittDweller/grocy-docker, where I&amp;rsquo;ve created a new docksal branch.</description></item><item><title>Dockerized Omeka-S: Starting Over</title><link>https://static.grinnell.edu/dlad-blog/posts/030-dockerized-omeka-s-starting-over/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/030-dockerized-omeka-s-starting-over/</guid><description>Attention! The Docksal portion of this discussion DID NOT WORK PROPERLY so I&amp;rsquo;ve hidden it from public view. Don&amp;rsquo;t use this project with Docksal (fin commands) until further notice! I&amp;rsquo;ve created a new fork of dodeeric/omeka-s-docker at DigitalGrinnell/omeka-s-docker, and it introduces a new docker-compose.yml file for spinning Omeka-S up locally, but WITHOUT Docksal (due to problems with the integration originally documented here).
System requirements for local development of this project currently include:</description></item><item><title>Debugging ISLE-ld (Local Development) in PHPStorm</title><link>https://static.grinnell.edu/dlad-blog/posts/023-debugging-isle-ld-in-phpstorm/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/023-debugging-isle-ld-in-phpstorm/</guid><description>Debugging ISLE on a Mac This guidance applies to debugging PHP code in a local ISLE-ld, that&amp;rsquo;s http://isle.localdomain, instance using PHPStorm.
Modify ISLE&amp;rsquo;s docker-compose.override.yml Before engaging PHPStorm we need to make one change to our ISLE-ld configuration by running a docker cp command, making a change to our docker-compose.override.yml file, and restarting the stack. Here are the commands and procedure.
Workstation Commands cd ~/Projects/ISLE mkdir -p persistent/html docker cp isle-apache-ld:/var/www/html/. ./persistent/html The above commands will make a new .</description></item></channel></rss>