<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Workflow on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/workflow/</link><description>Recent content in Workflow on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 09 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/workflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating Workflows from Atom to VSCode</title><link>https://static.grinnell.edu/dlad-blog/posts/123-migrating-workflows-from-atom-to-vscode/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/123-migrating-workflows-from-atom-to-vscode/</guid><description>&lt;p>This might just be my shortest post ever in this blog, at least for now. At this early date it&amp;rsquo;s just a link to the &lt;a href="https://blog.summittdweller.com/posts/2022/06/atom-no-more/">Atom No More?&lt;/a> blog post in my personal blog.&lt;/p>
&lt;p>The note above indicates that this post superseeds &lt;code>085-remote-atom&lt;/code>, but there are other &lt;em>Atom&lt;/em>-related posts that are also impacted.&lt;/p>
&lt;p>Some of these include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="posts/033-adding-lastmod-date/">posts/033-adding-lastmod-date/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As time passes I&amp;rsquo;ll document here any work-specific changes I make to my new &lt;em>VSCode&lt;/em> environments.&lt;/p>
&lt;h2 id="replacing-atom--with-code-">Replacing &lt;code>atom .&lt;/code> with &lt;code>code .&lt;/code>&lt;/h2>
&lt;p>The personal blog post mentioned above, &lt;a href="https://blog.summittdweller.com/posts/2022/06/atom-no-more/">Atom No More?&lt;/a>, includes a procedure I used to implement &lt;code>code .&lt;/code> to launch &lt;em>VSCode&lt;/em> from a terminal window on any of my Mac workstations. As of this writing, June 22, 2022, I have successfully implmented this change on all of my Grinnell College workstations.&lt;/p></description></item><item><title>New Oral History Transcription Workflow</title><link>https://static.grinnell.edu/dlad-blog/posts/121-new-oral-history-transcription-workflow/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/121-new-oral-history-transcription-workflow/</guid><description>&lt;p>&lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a> features a fair number of transcribed digital oral histories. Most are interviews conducted with Grinnelleans as they return to campus annually for alumni &lt;a href="https://alumni.grinnell.edu/events/reunion-and-alumni-college">Reunion&lt;/a> or Grinnell&amp;rsquo;s &lt;a href="http://magazine.grinnell.edu/news/evolution-multicultural-reunion">Multicultural Reunion&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>What follows is largely sharable &amp;ldquo;public&amp;rdquo; content lifted from a &amp;ldquo;private&amp;rdquo; GitHub repository at &lt;a href="https://github.com/McFateM/OHScribe">https://github.com/McFateM/OHScribe&lt;/a>, the README.md and WORKFLOW.md files in particular.&lt;/p>
&lt;/blockquote>
&lt;h2 id="ohscribe">OHScribe!&lt;/h2>

&lt;div class="original">&lt;p>&lt;a href="https://ohscribe.us.reclaim.cloud/">https://ohscribe.us.reclaim.cloud/&lt;/a>&lt;/p>
&lt;p>&lt;strong>Note: This link is the new production home for &lt;strong>OHScribe!&lt;/strong> as of March 2022. It is now hosted on &lt;strong>Reclaim Cloud&lt;/strong>. The old address, &lt;a href="https://ohscribe.grinnell.edu">https://ohscribe.grinnell.edu&lt;/a>, is no longer in service.&lt;/strong>&lt;/p>
&lt;p>&lt;em>OHScribe!&lt;/em> code now resides in a &lt;a href="https://github.com/DigitalGrinnell/OHScribe">private repository&lt;/a> so a copy of its shared documents are also provided as public gists. They are:&lt;/p></description></item><item><title>Book Ingest in Digital.Grinnell</title><link>https://static.grinnell.edu/dlad-blog/posts/097-book-ingest-in-digital-grinnell/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/097-book-ingest-in-digital-grinnell/</guid><description>&lt;p>It&amp;rsquo;s high-time this was posted to my blog, but the canonical copy of this document can be found in &lt;code>smb://Storage/LIBRARY/mcfatem/DG-Book-Ingest-Workflow.md&lt;/code>.&lt;/p>
&lt;h2 id="valid-book-datastream-structure">Valid Book Datastream Structure&lt;/h2>
&lt;p>I want to begin here by showing what I see as a &amp;ldquo;proper&amp;rdquo; working book datastream structure in &lt;em>Digital.Grinnell&lt;/em>. The image below is a screen grab of the datastreams from the &lt;a href="https://digital.grinnell.edu/islandora/object/grinnell:23749">Grinnell College Yearbook 1961&lt;/a>, &lt;em>DG&lt;/em> object &lt;code>grinnell:23749&lt;/code>:&lt;/p>
&lt;link rel="stylesheet" href="https://static.grinnell.edu/dlad-blog/css/hugo-easy-gallery.css" />
&lt;div class="box" >
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
 &lt;div class="img">
 &lt;img itemprop="thumbnail" src="https://static.grinnell.edu/dlad-blog/images/post-097/grinnell-23749-datastreams.png" />
 &lt;/div>
 &lt;a href="https://static.grinnell.edu/dlad-blog/images/post-097/grinnell-23749-datastreams.png" itemprop="contentUrl">&lt;/a>
 &lt;figcaption>
 &lt;h4>Figure 1 &amp;middot; Valid Book Datastreams&lt;/h4>
 &lt;/figcaption>
 &lt;/figure>
&lt;/div>
&lt;h2 id="creating-a-valid-book-structure">Creating a Valid Book Structure&lt;/h2>
&lt;p>One of the biggest problems I have encountered with ingest of books is uploading very large multi-page PDFs. Fortunately, I&amp;rsquo;ve crafted the following procedure for working around that limitation.&lt;/p></description></item><item><title>Git Submodule Tips</title><link>https://static.grinnell.edu/dlad-blog/posts/100-git-submodule-tips/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/100-git-submodule-tips/</guid><description>&lt;p>I seem to have a never-ending struggle with &lt;strong>git submodules&lt;/strong>. Today, I need to add some new features to one of my submodules in a non-ISLE project, but I&amp;rsquo;ve elected to post this here because this blog is relatively easy to search. I also feel fortunate to have found &lt;a href="https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407">Mastering Git Submodules&lt;/a> from &lt;a href="https://medium.com/@porteneuve">Christophe Porteneuve&lt;/a>.&lt;/p>
&lt;p>So, what I need to do now is update some submodule code, commit, and push that change back to its remote. I will also want to subsequentmly update a pair of projects that use the submodule so they are referencing the newest submodule code.&lt;/p></description></item><item><title>Git Submodule Workflow in ISLE</title><link>https://static.grinnell.edu/dlad-blog/posts/098-git-submodule-workflow-in-isle/</link><pubDate>Mon, 07 Dec 2020 18:23:02 -0600</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/098-git-submodule-workflow-in-isle/</guid><description>&lt;p>In the past few days I&amp;rsquo;ve attempted to update the &amp;ldquo;staging&amp;rdquo; copy of &lt;em>Digital.Grinnell&lt;/em> at &lt;a href="https://dg-staging.grinnell.edu">https://dg-staging.grinnell.edu&lt;/a> and learned a valuable lesson regarding workflow around &lt;em>Git&lt;/em> and &lt;em>submodules&lt;/em>. Specifically, I found the following resource to be most helpful:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://intellipaat.com/community/9971/git-update-submodule-to-latest-commit-on-origin">https://intellipaat.com/community/9971/git-update-submodule-to-latest-commit-on-origin&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In case that post ever disappers, here&amp;rsquo;s the gist of it&amp;hellip;&lt;/p>

&lt;div class="original">&lt;p>The &lt;code>git submodule update&lt;/code> command actually tells git that you simply want your submodules to each check out the commit already mentioned in the index of the superproject.&lt;/p>
&lt;p>If you want to update your submodules to the most recent commit available from their remote, you&amp;rsquo;ll try this directly within the submodules.&lt;/p></description></item><item><title>Oral History Transcription Workflow</title><link>https://static.grinnell.edu/dlad-blog/posts/077-oral-history-transcription-workflow/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/077-oral-history-transcription-workflow/</guid><description>&lt;p>&lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a> features a fair number of transcribed digital oral histories. Most are interviews conducted with Grinnelleans as they return to campus annualy for alumni &lt;a href="https://alumni.grinnell.edu/events/reunion-and-alumni-college">Reunion&lt;/a> or Grinnell&amp;rsquo;s &lt;a href="http://magazine.grinnell.edu/news/evolution-multicultural-reunion">Multicultural Reunion&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>What follows is largely sharable &amp;ldquo;public&amp;rdquo; content lifted from a &amp;ldquo;private&amp;rdquo; GitHub repository at &lt;a href="https://github.com/McFateM/OHScribe">https://github.com/McFateM/OHScribe&lt;/a>, the README.md and WORKFLOW.md files in particular.&lt;/p>
&lt;/blockquote>
&lt;h2 id="ohscribe">OHScribe!&lt;/h2>
&lt;p>&lt;a href="https://ohscribe.grinnell.edu">https://ohscribe.grinnell.edu&lt;/a> &lt;strong>Note: This link was disabled in the spring of 2020, but is working again as of July 1, 2020, on host DGDocker3.&lt;/strong>&lt;/p>
&lt;p>This is a &lt;em>Python 3&lt;/em> and &lt;em>Flask&lt;/em> web application designed to transform oral history transcripts, presumably created using &lt;a href="https://www.inqscribe.com">InqScribe&lt;/a>, into XML suitable for ingest into the &lt;strong>&lt;a href="https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories">Islandora Oral Histories Solution Pack&lt;/a>&lt;/strong> to populate a TRANSCRIPT datastream and its derivatives. &lt;em>Islandora Oral Histories&lt;/em> and the aforementioned solution pack are commonly referred to as &lt;strong>IOH&lt;/strong> throughout this document.&lt;/p></description></item><item><title>How to Work with Git</title><link>https://static.grinnell.edu/dlad-blog/posts/056-how-to-work-with-git/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/056-how-to-work-with-git/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Credits: This document is an abstraction of some &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE/wiki/How-to-Work-with-Git">fine documentation&lt;/a> authored and posted by my &lt;a href="https://github.com/Islandora-Collaboration-Group">ICG&lt;/a> colleague and friend, &lt;a href="https://github.com/dwk2">David Keiser-Clark&lt;/a>.&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="icg-git-workflow-how-to-work-with-git">ICG Git Workflow: How to work with Git&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>The examples in this document use my work with the Islandora Collaboration Group&amp;rsquo;s (ICG) &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools">ISLE-Drupal-Build-Tools&lt;/a> repository, as well as &lt;a href="https://github.com/Digital-Grinnell/ISLE-Drupal-Build-Tools">my fork&lt;/a> and local clone of that repository.&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>I recommend having a look at the &lt;a href="https://help.github.com/en/github/getting-started-with-github/github-glossary">GitHub Glossary&lt;/a> for a list of terms used frequently in this post, and many of the referenced documents.&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>The terms &lt;code>original&lt;/code>, &lt;code>canonical&lt;/code>, and &lt;code>upstream&lt;/code> are also used in this post to describe the &lt;em>GitHub&lt;/em> repository at the root of the project being managed.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Configuration: In most cases you will do Steps 1-3 only once! If you move to a new machine execute Steps 2-3 only.&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Only &amp;ldquo;fork&amp;rdquo; once! Do not repeat Step 1 if you&amp;rsquo;ve already forked the original/canonical repo.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Only &amp;ldquo;clone&amp;rdquo; once! Do not repeat Step 2 if you already have a local clone of your fork.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Only add this remote once! Do not perform this step if your local repo already has an &lt;code>upstream&lt;/code> remote.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>Always &lt;em>fork&lt;/em> the repo (repository) you are working on.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>This is accomplished by logging into your &lt;em>GitHub&lt;/em> account and selecting &lt;strong>Fork&lt;/strong> near the top right of the repo&amp;rsquo;s page.
&lt;ul>
&lt;li>Navigate your browser to the &lt;em>GitHub&lt;/em> project you wish to work on. Example: &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools">https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools&lt;/a>&lt;/li>
&lt;li>Click the &lt;strong>Fork&lt;/strong> button near the top right of the repo&amp;rsquo;s &lt;em>GitHub&lt;/em> page.&lt;/li>
&lt;li>This will either create a new fork in your own &lt;em>GitHub&lt;/em> account, or prompt you to choose an account if you have more than one. In either case, make a note of where the fork is created! In this document we&amp;rsquo;ll reference your fork&amp;rsquo;s URI as &lt;code>upstream&lt;/code>. Example: &lt;a href="https://github.com/Digital-Grinnell/ISLE-Drupal-Build-Tools">https://github.com/Digital-Grinnell/ISLE-Drupal-Build-Tools&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Clone your fork down to your local machine.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Navigate your browser to the fork. Example: &lt;a href="https://github.com/Digital-Grinnell/ISLE-Drupal-Build-Tools">https://github.com/Digital-Grinnell/ISLE-Drupal-Build-Tools&lt;/a>&lt;/li>
&lt;li>Click on the &lt;strong>Clone&lt;/strong> button to copy the fork&amp;rsquo;s URI to your clipboard.&lt;/li>
&lt;li>Open terminal/shell/powershell/cmd, navigate to your preferred project &amp;ldquo;parent&amp;rdquo; directory, and &lt;code>git clone &amp;lt;paste from clipboard&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Change into the directory (&lt;code>cd&lt;/code>) with the files you just cloned.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>Before you start working, add an &lt;code>upstream&lt;/code> pointer to the original/canonical repo that you forked.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Navigate your browser back to the original/canonical &lt;em>GitHub&lt;/em> project. Example: &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools">https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools&lt;/a>&lt;/li>
&lt;li>From this repo, NOT your fork or local clone, click on the &lt;strong>Clone&lt;/strong> button and copy the &lt;em>https&lt;/em> URI to your clipboard.&lt;/li>
&lt;li>In terminal/shell/powershell/cmd enter &lt;code>git remote add upstream &amp;lt;paste from clipboard&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Make certain your &lt;code>master&lt;/code> branches are even with the original/canonical &lt;code>master&lt;/code>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;ol start="4">
&lt;li>STOP! Get up-to-date before you do anything, fetch your remotes so your local clone has the most recent commits.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Change into the directory (&lt;code>cd&lt;/code>) with the files you cloned.&lt;/li>
&lt;li>In terminal/shell/powershell/cmd enter &lt;code>git fetch --all&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>Checkout and pull the &lt;code>upsteam master&lt;/code> to your local &lt;code>master&lt;/code> branch.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Checkout your master: &lt;code>git checkout master&lt;/code>&lt;/li>
&lt;li>Pull the &lt;code>upstream&lt;/code> master into yours so your local is up-to-date: &lt;code>git pull upstream master&lt;/code>&lt;/li>
&lt;li>Push your local &lt;code>master&lt;/code> branch BACK to your fork in &lt;em>GitHub&lt;/em>.
&lt;ul>
&lt;li>If all is well and your &lt;code>git pull...&lt;/code> resulted in a fast-forward or &amp;ldquo;Already up to date.&amp;rdquo;, then: &lt;code>git push origin master&lt;/code>&lt;/li>
&lt;li>If your &lt;code>git pull...&lt;/code> did not fast-forward and a merge message appeared, then there were differences in your branches. Never work on &lt;code>master&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Create an &lt;em>issue&lt;/em> and a topic/fix/enhancement/document &lt;em>branch&lt;/em> for your work, and have at!&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;ol start="6">
&lt;li>Create an &lt;em>issue&lt;/em> for your work.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Navigate your browser to the original/canonical &lt;em>GitHub&lt;/em> project you wish to work on. Example: &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools">https://github.com/Islandora-Collaboration-Group/ISLE-Drupal-Build-Tools&lt;/a>&lt;/li>
&lt;li>Find and open the &lt;code>Issues&lt;/code> tab (its icon is an exclamation point in a circle) near the top of the page.&lt;/li>
&lt;li>Look through the list of all issues, both &lt;code>Open&lt;/code> and &lt;code>Closed&lt;/code>, for any mention of the problem you wish to solve.
&lt;ul>
&lt;li>If you find an existing issue, study it and determine if you can add your work to the existing issue.&lt;/li>
&lt;li>If an appropriate existing issue is not found, click &lt;code>New issue&lt;/code> to create one and describe the problem you will be attacking.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Take note of the new, or existing, sequential number assigned to your issue. In subsequent steps you should refer to your issue using its number (Example: #20) in references like these examples: &lt;code>#20&lt;/code>, &lt;code>issue-20&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="7">
&lt;li>Create your branch and check it out.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Create a branch with: &lt;code>git branch &amp;lt;helpful and identifying name&amp;gt;&lt;/code>. Example: &lt;code>git branch issue-20&lt;/code>&lt;/li>
&lt;li>Checkout your new branch with &lt;code>git checkout &amp;lt;helpful and identifying name&amp;gt;&lt;/code>. Example: &lt;code>git checkout issue-20&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="8">
&lt;li>Start your work and commit locally, aka &amp;ldquo;save your work&amp;rdquo;, at times (probably more than once) that feel logical.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Create logical checkpoints (i.e., commits) when you feel you&amp;rsquo;ve finished on a particular &amp;ldquo;part&amp;rdquo; of your work. Example: You&amp;rsquo;ve just created a new file and added some stubbed content: Commit it!
&lt;ul>
&lt;li>Commits are references in your work and can be helpful if you need to go back to an earlier version of your work, sort of like an &amp;ldquo;undo&amp;rdquo; command. By committing regularly, you give yourself utmost flexibility and it&amp;rsquo;s a good practice/habit.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="9">
&lt;li>
&lt;p>Creating commits.&lt;/p></description></item><item><title>Digital.Grinnell's IMI Workflow</title><link>https://static.grinnell.edu/dlad-blog/posts/040-digital.grinnells-imi-workflow/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/040-digital.grinnells-imi-workflow/</guid><description>&lt;p>Note: The abbreviation &lt;strong>IMI&lt;/strong> is used frequently in this post to represent the &lt;a href="https://github.com/mnylc/islandora_multi_importer.git">Islandora Multi-Importer&lt;/a>, a CSV-file-driven batch ingest tool used by numerous institutions in the Islandora community.&lt;/p>
&lt;p>Also, while updating this post I found this gem&amp;hellip; &lt;a href="https://medium.com/technical-writing-is-easy/diagrams-in-documentation-markdown-guide-4e78419e8d2f">Diagrams in Documentation (Markdown Guide)&lt;/a>.&lt;/p>
&lt;p>This post is an addition to the discussion in &lt;a href="https://static.grinnell.edu/dlad-blog/posts/028-mounting-storage-for-imi-ingest-in-digital-grinnell/">post 028, Mounting //Storage for IMI Ingest in Digital.Grinnell &lt;/a> which was written largely to remind me how the //Storage mount works. &amp;#x1f615; Unlike &lt;a href="https://static.grinnell.edu/dlad-blog/posts/028-mounting-storage-for-imi-ingest-in-digital-grinnell/">post 028&lt;/a>, this post is meant for myself AND for others at Grinnell College who prepare digital objects for ingest via IMI. For those individuals&amp;hellip; it&amp;rsquo;s not necessary that you understand all of this, but it you choose to read-on, I hope you find this information helpful.&lt;/p></description></item></channel></rss>