<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XDEBUG on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/xdebug/</link><description>Recent content in XDEBUG on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 17 Mar 2021 08:39:33 -0500</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/xdebug/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging ISLE Local with PHPStorm</title><link>https://static.grinnell.edu/dlad-blog/posts/103-debugging-isle-local-with-phpstorm/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/103-debugging-isle-local-with-phpstorm/</guid><description>&lt;p>For the past couple of years I&amp;rsquo;ve been working in &lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a> to remove as much &amp;ldquo;customization&amp;rdquo; as I can. The effort is coming along, but still, there&amp;rsquo;s a long way to go. Every now and then I come across a feature that we just can&amp;rsquo;t live without, and it&amp;rsquo;s in times like those that I turn to &lt;a href="https://www.jetbrains.com/phpstorm/">PHPStorm&lt;/a> for development and testing. Unfortunately, I&amp;rsquo;ve been operating without &lt;em>PHPStorm&lt;/em> in &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE">ISLE&lt;/a> because I worried that configuring the &lt;em>PHPStorm&lt;/em> debugger in a Docker environment would be a time-consuming, tall task. It &lt;strong>was&lt;/strong> tricky, but worry no more!&lt;/p></description></item><item><title>Debugging PHP in ISLE: a Kludge</title><link>https://static.grinnell.edu/dlad-blog/posts/025-kludge-debugging-isle/</link><pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/025-kludge-debugging-isle/</guid><description>&lt;p>In an earlier &lt;a href="https://static.grinnell.edu/dlad-blog/posts/021-rebuilding-isle-ld/">post&lt;/a> I chronicle the exhaustive steps taken to create a &amp;ldquo;debuggable&amp;rdquo; local/development instance of Digital.Grinnell that behaves exactly like the &lt;a href="https://digital.grinnell.edu">real thing&lt;/a>, except with a much smaller, portable &lt;em>FEDORA&lt;/em> repository under it. I&amp;rsquo;m claiming success on that front, but there is one glaring kludge in the process that I have yet to work out.&lt;/p>
&lt;h3 id="the-kludge">The Kludge&lt;/h3>
&lt;p>So, my debugging of an &lt;em>ISLE&lt;/em> stack involves the coordinated configuration and engagement of &lt;a href="https://xdebug.org/">XDebug&lt;/a> inside the &lt;em>Apache&lt;/em> container, and &lt;a href="https://www.jetbrains.com/phpstorm/">PHPStorm&lt;/a>, along with persistence of the stack&amp;rsquo;s PHP codebase&amp;hellip; and therein lies the rub.&lt;/p></description></item><item><title>Debugging ISLE-ld (Local Development) in PHPStorm</title><link>https://static.grinnell.edu/dlad-blog/posts/023-debugging-isle-ld-in-phpstorm/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/023-debugging-isle-ld-in-phpstorm/</guid><description>&lt;h1 id="debugging-isle-on-a-mac">Debugging ISLE on a Mac&lt;/h1>
&lt;p>This guidance applies to debugging PHP code in a local &lt;code>ISLE-ld&lt;/code>, that&amp;rsquo;s &lt;a href="http://isle.localdomain">http://isle.localdomain&lt;/a>, instance using &lt;a href="https://www.jetbrains.com/phpstorm/">PHPStorm&lt;/a>.&lt;/p>
&lt;h2 id="modify-isles-docker-composeoverrideyml">Modify ISLE&amp;rsquo;s &lt;code>docker-compose.override.yml&lt;/code>&lt;/h2>
&lt;p>Before engaging &lt;em>PHPStorm&lt;/em> we need to make one change to our &lt;code>ISLE-ld&lt;/code> configuration by running a &lt;code>docker cp&lt;/code> command, making a change to our &lt;code>docker-compose.override.yml&lt;/code> file, and restarting the stack. Here are the commands and procedure.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Workstation Commands&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>cd ~/Projects/ISLE &lt;br/> mkdir -p persistent/html &lt;br/> docker cp isle-apache-ld:/var/www/html/. ./persistent/html&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>The above commands will make a new &lt;code>./persistent/html&lt;/code> directory on the host, if one does not already exist, and the &lt;code>docker cp&lt;/code> command will copy the current contents of the &lt;em>Apache&lt;/em> container&amp;rsquo;s &lt;code>/var/www/html&lt;/code> directory to the host. Next we need to modify &lt;code>docker-compose.override.yml&lt;/code> to map the &lt;code>./persistent/html&lt;/code> directory into the container.&lt;/p></description></item></channel></rss>