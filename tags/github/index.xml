<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/github/</link><description>Recent content in GitHub on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 05 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Pushing GitHub Notifications to Slack</title><link>https://static.grinnell.edu/dlad-blog/posts/127-github-notifications-to-slack/</link><pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/127-github-notifications-to-slack/</guid><description>Lately I&amp;rsquo;ve lamented that all incoming emails to @grinnell.edu addresses pass through a URLDefense / Proofpoint agent that sanitizes all clickable links as a safety/security precaution. In the case of emails automatically dispatched by GitHub the &amp;ldquo;butchering&amp;rdquo; of such messages leaves me with an almost useles notification, one that&amp;rsquo;s so badly bloated that I typically choose to ignore it. Clearly, that&amp;rsquo;s not how notifications are suppsoed to be handled.
Example of a Butchered Email To help make my point I&amp;rsquo;ll share a small portion of a relatively small email notification below.</description></item><item><title>Archiving What Git Ignores</title><link>https://static.grinnell.edu/dlad-blog/posts/066-archiving-what-git-ignores/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/066-archiving-what-git-ignores/</guid><description>I love git and GitHub, and I can certainly appreciate the usefullness of .gitignore, but there are times when I&amp;rsquo;d really like to move an ENTIRE project to a new home. I have in my head a process that might play out like this&amp;hellip;
Fetch a list of all the files and directories that .gitignore is ignoring. Pass that list to a tar or gzip command (maybe two of them) with encryption to create a secure, compressed archive. Commit the archive to the project repo in GitHub, or keep it in a safe place for restoration in the future.</description></item><item><title>How to Create a New GitHub Repo from an Existing Branch</title><link>https://static.grinnell.edu/dlad-blog/posts/065-create-new-github-project-from-a-branch/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/065-create-new-github-project-from-a-branch/</guid><description>I just found a handy git/GitHub workflow in a Quora post titled &amp;ldquo;How do I create a new GitHub repository from a branch in an existing repository?&amp;rdquo;. And I used it, successfully, to create a new GitHub repo for my updated Drupal 8 rendition of the Wieting Theatre&amp;rsquo;s website.
The new GitHub repo is wieting-D8-DO and it was created from the wieting branch of docker-compose-drupal.
The commands I used looked something like this:
cd ~/GitHub git clone https://github.com/SummittDweller/docker-compose-drupal.git cd docker-compose-drupal git checkout master git reset --hard origin/wieting git checkout wieting git remote rm origin git remote add origin https://github.</description></item><item><title>How to Work with Git</title><link>https://static.grinnell.edu/dlad-blog/posts/056-how-to-work-with-git/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/056-how-to-work-with-git/</guid><description>Credits: This document is an abstraction of some fine documentation authored and posted by my ICG colleague and friend, David Keiser-Clark. ICG Git Workflow: How to work with Git The examples in this document use my work with the Islandora Collaboration Group&amp;rsquo;s (ICG) ISLE-Drupal-Build-Tools repository, as well as my fork and local clone of that repository. I recommend having a look at the GitHub Glossary for a list of terms used frequently in this post, and many of the referenced documents.</description></item><item><title>Easily Change GitHub User in OSX</title><link>https://static.grinnell.edu/dlad-blog/posts/055-easily-change-github-user-in-osx/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/055-easily-change-github-user-in-osx/</guid><description>The first step is to run git config -l to see what the current configuration is. If the user.name and/or user.email properties are incorrect, change them using something like this:
git config --global user.name &amp;#34;Mark McFate&amp;#34; git config --global user.email &amp;#34;yourEMail@address.here&amp;#34; That&amp;rsquo;s only half the battle. I love OSX and the Keychain Access app is wonderful, except when I&amp;rsquo;m working with git and GitHub in a terminal, which I do quite often. The real problem is that I have 4 different identities in GitHub&amp;hellip; crazy, I know.</description></item></channel></rss>