<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/docker/</link><description>Recent content in Docker on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 19 Dec 2020 16:40:37 -0600</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Traefik and Acme.sh for DG-STAGING</title><link>https://static.grinnell.edu/dlad-blog/posts/093-traefik-and-acme.sh-for-dg-staging/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/093-traefik-and-acme.sh-for-dg-staging/</guid><description>&lt;p>This post is a follow-up to &lt;a href="https://static.grinnell.edu/dlad-blog/posts/079-traefik-and-acme.sh-instead-of-dns-01/">Dockerized Traefik Host Using ACME DNS-01 Challenge&lt;/a> and &lt;a href="https://static.grinnell.edu/dlad-blog/posts/092-staging-isle/">Staging ISLE Installation: Migrate Existing Islandora Site - with Annotations&lt;/a>, specifically &lt;em>Step 11&lt;/em> in the later document. It introduces a &lt;em>Digital.Grinnell&lt;/em>-specific implementation of the &lt;em>Traefik&lt;/em> with &lt;em>Acme.sh&lt;/em>.&lt;/p>
&lt;h2 id="testing-with-mcfatemdocker-traefik2-acme-host">Testing with McFateM/docker-traefik2-acme-host&lt;/h2>
&lt;p>I started work on this implementation with a test, by cloning &lt;a href="https://github.com/McFateM/docker-traefik2-acme-host">https://github.com/McFateM/docker-traefik2-acme-host&lt;/a> and proceeding as directed in the repository&amp;rsquo;s &lt;a href="https://github.com/McFateM/docker-traefik2-acme-host/blob/master/README.md">README.md&lt;/a> document, as user &lt;code>islandora&lt;/code> on node &lt;em>DGDockerX&lt;/em>, like so:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>DGDockerX Host Commands&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>cd ~&lt;/code> &lt;br/> &lt;code>git clone https://github.com/McFateM/docker-traefik2-acme-host host --recursive&lt;/code> &lt;br/> &lt;code>cd host&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="working-in-hostacme">Working in &lt;code>~/host/acme&lt;/code>&lt;/h3>
&lt;p>As suggested, I made a copy of the &lt;code>.env&lt;/code> file from the corresponding &lt;code>acme&lt;/code> directory on Grinnell&amp;rsquo;s &lt;code>dgdocker3.grinnell.edu&lt;/code> server, something like this:&lt;/p></description></item><item><title>Scheduled Updates for a Hugo Static Site</title><link>https://static.grinnell.edu/dlad-blog/posts/086-scheduled-updates-for-a-hugo-static-site/</link><pubDate>Sat, 18 Jul 2020 16:56:04 -0500</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/086-scheduled-updates-for-a-hugo-static-site/</guid><description>&lt;p>A few months ago I migrated a site, &lt;a href="https://compassroseband.net">The Compass Rose Band&lt;/a>, from Drupal to Hugo for my Uncle. Since then I have been maintaining the site, adding and removing dates, and updating the site about every other week. With the passage of time events on the site &amp;ldquo;automatically&amp;rdquo; move from &amp;ldquo;upcoming&amp;rdquo; to &amp;ldquo;past&amp;rdquo;, but since it is a &amp;ldquo;static&amp;rdquo; site, that only happens when I recompile and rebuild the site. So I needed to automate builds.&lt;/p>
&lt;p>I tried a few different ideas I&amp;rsquo;d heard about, including &lt;a href="http://crontab.org">crontab&lt;/a>, but on my Mac desktop I ended up settling on an &lt;a href="https://support.apple.com/guide/automator/welcome/mac">Automator&lt;/a> workflow tied to a &lt;em>Calendar&lt;/em> event.&lt;/p></description></item><item><title>Host Config: docker-traefik2-acme-host</title><link>https://static.grinnell.edu/dlad-blog/posts/080-host-config-docker-traefik2-acme-host/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/080-host-config-docker-traefik2-acme-host/</guid><description>&lt;p>This post is celebrating the completion (really, is anything ever complete?) of a new server/host/stack deployment project: &lt;a href="https://github.com/McFateM/docker-traefik2-acme-host">docker-traefik2-acme-host&lt;/a>. In order to make this post really easy to read, I&amp;rsquo;m going to wrap it up in one bullet&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/McFateM/docker-traefik2-acme-host/blob/master/README.md">README.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="troubleshooting">Troubleshooting&lt;/h2>
&lt;p>Should you ever encounter an error like the one below, be sure to ask your IT provider if they created the proper &lt;code>CNAME&lt;/code> record when creating your DNS entry.&lt;/p>
&lt;pre tabindex="0">&lt;code>[Tue Jun 30 20:53:50 UTC 2020] ohscribe.grinnell.edu:Verify error:DNS problem: NXDOMAIN looking up TXT for _acme-challenge.ohscribe.grinnell.edu - check that a DNS record exists for this domain
&lt;/code>&lt;/pre>&lt;p>That turned out to be the source of this error for me when I tried to obtain a cert for &lt;code>ohscribe.grinnell.edu&lt;/code> on node &lt;code>DGDocker3&lt;/code>.&lt;/p></description></item><item><title>Traefik and Acme.sh Instead of DNS-01</title><link>https://static.grinnell.edu/dlad-blog/posts/079-traefik-and-acme.sh-instead-of-dns-01/</link><pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/079-traefik-and-acme.sh-instead-of-dns-01/</guid><description>&lt;p>This post is a follow-up to &lt;a href="https://static.grinnell.edu/dlad-blog/en/posts/071-dockerized-traefik-using-acme-dns-01">Dockerized Traefik Host Using ACME DNS-01 Challenge&lt;/a>. It introduces an alternative to the failed process that was proposed in that earlier post.&lt;/p>
&lt;blockquote>
&lt;p>Note that the following config-specific elements have been replaced below:&lt;/p>
&lt;ul>
&lt;li>6 occurances of &lt;code>?.grinnell.edu&lt;/code> now say &lt;code>example-1.grinnell.edu&lt;/code>, and&lt;/li>
&lt;li>2 occurances of &lt;code>?.info&lt;/code> now say &lt;code>example-2.info&lt;/code>.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h2 id="new-proposal">New Proposal&lt;/h2>
&lt;p>On June 1 my colleage, Matt, suggested the following&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>As much as I would like to resolve the DNS-01 challenge using Traefik alone, I don&amp;rsquo;t believe it will support what we&amp;rsquo;re trying to do here. I&amp;rsquo;m a bit disappointed by that as Nginx makes this process very easy, and my reading through the Traefik documentation and my own tests lead me to believe that CNAME following is not currently supported in Traefik, and is basically impossible. Until the they allow for the verification domain to be specified as a provider option (in this case, specifying example-2.info as the domain for the Azure DNS provider), using the built-in ACME functionality in Traefik won&amp;rsquo;t work, no matter which DNS provider is in use.&lt;/p></description></item><item><title>Simplified Testing of Traefik 2 with ACME DNS-01 Challenge</title><link>https://static.grinnell.edu/dlad-blog/posts/074-simplified-testing-traefik-2-with-acme-dns-01/</link><pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/074-simplified-testing-traefik-2-with-acme-dns-01/</guid><description>&lt;p>This post is a simplified and focused follow-up to &lt;a href="https://static.grinnell.edu/dlad-blog/en/posts/071-dockerized-traefik-using-acme-dns-01/">Dockerized Traefik Host Using ACME DNS-01 Challenge&lt;/a>.&lt;/p>
&lt;h2 id="simplify">Simplify&lt;/h2>
&lt;p>Today, 19-May-2020, I&amp;rsquo;m going to take a shot at simplifying my testing on &lt;code>dgdocker3.grinnell.edu&lt;/code> by removing unnecessary things and consolidating as much as possible to reduce clutter in the logs and get right to the point. I&amp;rsquo;m also going to have a look to see if there are additional logs that can tell give me more detail. &lt;strong>Everything&lt;/strong> used here, and everything that takes place here, will be found in a new directory, &lt;code>/opt/containers/test&lt;/code> on &lt;em>DGDocker3&lt;/em>.&lt;/p></description></item><item><title>Dockerized Traefik Host Using ACME DNS-01 Challenge</title><link>https://static.grinnell.edu/dlad-blog/posts/071-dockerized-traefik-using-acme-dns-01/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/071-dockerized-traefik-using-acme-dns-01/</guid><description>&lt;p>This post builds on &lt;a href="https://dlad.summittdweller.com/en/posts/042-my-dockerized-server-config/">My dockerized-server Config&lt;/a> and attempts to change what was a problematic &lt;a href="https://docs.traefik.io/https/acme/#httpchallenge">ACME HTTP-01 or httpChallenge&lt;/a> in &lt;a href="https://traefik.io">Traefik&lt;/a> and &lt;a href="https://letsencrypt.org">Let&amp;rsquo;s Encrypt&lt;/a> to an &lt;a href="https://docs.traefik.io/https/acme/#dnschallenge">ACME DNS-01 or dnsChallenge&lt;/a>. The problem with the old &lt;em>HTTP-01&lt;/em> or &lt;em>httpChallenge&lt;/em> is that it requires the creation of a valid and widely accessible &amp;ldquo;A&amp;rdquo; record in our DNS &lt;em>before&lt;/em> the creation of a cert; the record has to be in place so that the &lt;em>Let&amp;rsquo;s Encrypt&lt;/em> CA-server can find it to confirm that the request is valid. However, doing this puts the cart-before-the-horse, so-to-speak, since we like to have a valid cert in place &lt;em>before&lt;/em> we add a new DNS record.&lt;/p></description></item><item><title>A Dockerized 'Handle' Server</title><link>https://static.grinnell.edu/dlad-blog/posts/043-a-dockerzied-handle-server/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/043-a-dockerzied-handle-server/</guid><description>&lt;p>Today&amp;rsquo;s quest&amp;hellip; to build a new &lt;a href="http://www.handle.net">Handle.net&lt;/a> server for &lt;em>Digital.Grinnell&lt;/em>, preferably one that is &amp;ldquo;Dockerized&amp;rdquo;. I&amp;rsquo;m going to start by forking &lt;a href="https://github.com/datacite/docker-handle">datacite/docker-handle&lt;/a>, a project that looks promising, and following it along with the documentation in chapter 3 of the &lt;a href="http://www.handle.net/tech_manual/HN_Tech_Manual_9.pdf">HANDLE.NET (version 9) Technical Manual&lt;/a>. The aforementioned fork can now be found in &lt;a href="https://github.com/DigitalGrinnell/docker-handle">DigitalGrinnell/docker-handle&lt;/a>.&lt;/p>
&lt;h2 id="the-digital7-saga">The &lt;em>digital7&lt;/em> Saga&lt;/h2>
&lt;p>My old friend and server (or should that be servant?), &lt;em>digital7&lt;/em>, used to be the home of &lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a> in &lt;a href="https://islandora.ca">Islandora v7&lt;/a>, before &lt;a href="https://en.wikipedia.org/wiki/Docker_(software)">Docker&lt;/a> and &lt;a href="https://github.com/Islandora-Collaboration-Group/ISLE">ISLE&lt;/a> came along. It&amp;rsquo;s an &lt;a href="https://ubuntu.com/">Ubuntu 14.04.5 LTS&lt;/a> server, and in addition to hosting &lt;em>Digital.Grinnell&lt;/em>, it also used to host our &lt;em>HANDLE.NET&lt;/em> server. Hmmm&amp;hellip;&lt;/p></description></item><item><title>My dockerized-server Config</title><link>https://static.grinnell.edu/dlad-blog/posts/042-my-dockerized-server-config/</link><pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/042-my-dockerized-server-config/</guid><description>&lt;p>This post picks up from where &lt;a href="https://static.grinnell.edu/dlad-blog/posts/041-configuring-dgdocker2">Configuring DGDocker2&lt;/a> left off. In it I will establish a workflow to setup a &amp;ldquo;Dockerized&amp;rdquo; server complete with &lt;em>Traefik&lt;/em>, &lt;em>Portainer&lt;/em>, and &lt;em>Who Am I&lt;/em>. It should be relatively easy to add additional non-static services to any server that is initially configured using this package. For &amp;ldquo;static&amp;rdquo; servers have a look at post &lt;a href="https://static.grinnell.edu/dlad-blog/posts/008-docker-bootstrap-workflow/">008 docker-bootstrap Workflow &lt;/a>.&lt;/p>
&lt;h2 id="capture-as-a-project">Capture As a Project&lt;/h2>
&lt;p>Picking up from the end of &lt;a href="https://static.grinnell.edu/dlad-blog/posts/041-configuring-dgdocker2">Configuring DGDocker2&lt;/a>, my first step on the &lt;em>dgdocker2&lt;/em> server was to move everything into a single subdirectory of &lt;em>/opt&lt;/em>; I called the new directory &lt;em>dockerized-server&lt;/em>, like so:&lt;/p></description></item><item><title>Configuring DGDocker2</title><link>https://static.grinnell.edu/dlad-blog/posts/041-configuring-dgdocker2/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/041-configuring-dgdocker2/</guid><description>&lt;p>My mission today is to successfully migrate the images/containers/services chronicled in &lt;a href="https://static.grinnell.edu/dlad-blog/posts/030-dockerized-omeka-s-starting-over/">post 030, &amp;ldquo;Dockerized Omeka-S: Starting Over&amp;rdquo;&lt;/a> to Docker-ready node &lt;em>dgdocker2&lt;/em> without compromising any of the services that already run there.&lt;/p>
&lt;h2 id="pushing-wmi-omeka-s-to-production-on-dgdocker2">Pushing WMI Omeka-S to Production on &lt;em>dgdocker2&lt;/em>&lt;/h2>
&lt;p>Grinnell&amp;rsquo;s &lt;em>dgdocker2&lt;/em> server, specifically &lt;em>dgdocker2.grinnell.edu&lt;/em> with an IP address of 132.161.132.143, is a Docker-ready CentOS 7 node that&amp;rsquo;s currently supporting the following containers and configuration:&lt;/p>
&lt;pre tabindex="0">&lt;code>╭─root@dgdocker2 ~
╰─# docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
ef20d71ffea8 mcfatem/ohscribe &amp;#34;./boot.sh&amp;#34; 6 days ago Up 6 days 5000/tcp ohscribe
b525f4670cd2 mariadb:latest &amp;#34;docker-entrypoint.s…&amp;#34; 2 weeks ago Up 2 weeks 3306/tcp omekasdocker_mariadb_1
7f107a24c204 traefik:latest &amp;#34;/traefik --docker -…&amp;#34; 2 weeks ago Up 2 weeks 0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:8080-&amp;gt;8080/tcp traefik_proxy
9282ab53ecc4 portainer/portainer:latest &amp;#34;/portainer --admin-…&amp;#34; 5 weeks ago Up 5 weeks 0.0.0.0:9000-&amp;gt;9000/tcp portainer
60ce06301101 dodeeric/omeka-s:latest &amp;#34;docker-php-entrypoi…&amp;#34; 7 weeks ago Up 7 weeks 80/tcp omekasdocker_omeka_1
54bd82694f3c phpmyadmin/phpmyadmin:latest &amp;#34;/docker-entrypoint.…&amp;#34; 2 months ago Up 2 months 80/tcp omekasdocker_pma_1
0cd019c5456e emilevauge/whoami &amp;#34;/whoamI&amp;#34; 2 months ago Up 2 months 80/tcp omekasdocker_whoami_1
7b3d4961ec21 v2tec/watchtower &amp;#34;/watchtower&amp;#34; 2 months ago Up 2 months watchtower
&lt;/code>&lt;/pre>&lt;p>Grinnell&amp;rsquo;s DNS is configured with the following addresses pointed to &lt;em>dgdocker2&lt;/em>:&lt;/p></description></item><item><title>Building Grocy in Docksal</title><link>https://static.grinnell.edu/dlad-blog/posts/036-building-grocy-in-docksal/</link><pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/036-building-grocy-in-docksal/</guid><description>&lt;p>&lt;a href="https://github.com/grocy/grocy">Grocy&lt;/a> looks lika a great little PHP stack application for me. It&amp;rsquo;s aim is to help folks organize and inventory their &amp;ldquo;stuff&amp;rdquo;, with a slant toward food and groceries. I need this!&lt;/p>
&lt;p>Since I&amp;rsquo;m also a big fan of &lt;a href="https://docker.io">Docker&lt;/a> and &lt;a href="https://docksal.io">Docksal&lt;/a>, naturally I wanted to spin Grocy up in one of these environments. Thankfully, the heavy lifting of getting this &amp;ldquo;Dockerized&amp;rdquo; has already been done, and that fine work is shared in GitHub at &lt;a href="https://github.com/grocy/grocy-docker">grocy/grocy-docker&lt;/a>. So my quest last evening started with a fork of this GitHub project to &lt;a href="https://github.com/SummittDweller/grocy-docker">SummittDweller/grocy-docker&lt;/a>, where I&amp;rsquo;ve created a new &lt;code>docksal&lt;/code> branch.&lt;/p></description></item><item><title>Resetting Docker</title><link>https://static.grinnell.edu/dlad-blog/posts/031-resetting-docker/</link><pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/031-resetting-docker/</guid><description>&lt;h2 id="this-command-snippet-needs-a-blog-post-of-its-own">This command snippet needs a blog post of its own!&lt;/h2>
&lt;p>I typically use the following command stream to clean up any Docker cruft before I begin anew. Note: Uncomment the third line ONLY if you want to delete images and download new ones. If you do, be patient, it could take several minutes depending on connection speed.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Workstation Commands&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>docker stop $(docker ps -q) &lt;br/> docker rm -v $(docker ps -qa) &lt;br/> # docker image rm $(docker image ls -q) &lt;br/> docker system prune &amp;ndash;force&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>And that&amp;rsquo;s a wrap. Until next time&amp;hellip;&lt;/p></description></item><item><title>Dockerized Omeka-S: Starting Over</title><link>https://static.grinnell.edu/dlad-blog/posts/030-dockerized-omeka-s-starting-over/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/030-dockerized-omeka-s-starting-over/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Attention!&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>The Docksal portion of this discussion DID NOT WORK PROPERLY so I&amp;rsquo;ve hidden it from public view. &lt;strong>Don&amp;rsquo;t use this project with Docksal (&lt;code>fin&lt;/code> commands) until further notice!&lt;/strong>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>I&amp;rsquo;ve created a new fork of &lt;a href="https://github.com/dodeeric/omeka-s-docker">dodeeric/omeka-s-docker&lt;/a> at &lt;a href="https://github.com/DigitalGrinnell/omeka-s-docker">DigitalGrinnell/omeka-s-docker&lt;/a>, and it introduces a new &lt;code>docker-compose.yml&lt;/code> file for spinning &lt;a href="https://omeka.org/s/">Omeka-S&lt;/a> up locally, but WITHOUT Docksal (due to problems with the integration originally documented &lt;a href="https://static.grinnell.edu/dlad-blog/posts/019-dockerized-omeka-s/">here&lt;/a>).&lt;/p>
&lt;p>System requirements for local development of this project currently include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/install/">Docker (Community Edition)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Git&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="local-development-and-testing">Local Development and Testing&lt;/h2>
&lt;p>If your workstation is able to run the aforementioned required components then the following steps can be used to launch and develop a local instance. Assuming your workstation is Linux or a Mac, you&amp;rsquo;ll need to edit your &lt;code>/etc/hosts&lt;/code> with an editor of your choice, and &lt;code>sudo&lt;/code> privileges might be required. For me this was&amp;hellip;&lt;/p></description></item><item><title>Removing Traefik's Weak Cipher Suites</title><link>https://static.grinnell.edu/dlad-blog/posts/005-removing-traefik-weak-ciphers/</link><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/005-removing-traefik-weak-ciphers/</guid><description>&lt;p>Most of the servers I deploy to and manage here at Grinnell College are now &amp;ldquo;Dockerized&amp;rdquo;, and all of those use &lt;a href="https://traefik.io/">Traefik&lt;/a> to manage traffic, of course. Before a web app or server can be opened for access to the world here, it has to pass a vulnerability scan, and I&amp;rsquo;m not privy to the specifics of that scan. However, I do know that &amp;ldquo;weak cipher suites&amp;rdquo; are a common source of failure among my newest servers. It took a couple of weeks of searching, and trial/error solution attempts to identify the nature and specific source of these weaknesses, and to eradicate them. In my case &lt;a href="https://traefik.io/">Traefik&lt;/a> was the &amp;ldquo;source&amp;rdquo; and the solution was/is to add the following configuration in the applicable &lt;em>docker-compose.yml&lt;/em> files, or &lt;em>docker run&amp;hellip;&lt;/em> command:&lt;/p></description></item><item><title>A Blog is Born</title><link>https://static.grinnell.edu/dlad-blog/posts/001-a-blog-is-born/</link><pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/001-a-blog-is-born/</guid><description>&lt;p>Have you ever wondered how a blog is born? The story behind this blog begins with my interest in stepping back from the CMS world, primarily &lt;a href="https://www.drupal.org/">Drupal&lt;/a>, to discover the joys of static site generation. The journey begins in earnest at the &lt;a href="https://www.diglib.org/dlf-events/2016forum/">2016 DLF Forum: Milwaukee&lt;/a> on the eve of the United States&amp;rsquo; 2016 national election, when all the buzz that wasn&amp;rsquo;t political, was about building static web sites, and &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>.&lt;/p>
&lt;p>A few weeks after the DLF Forum this server was born, thanks to the my colleagues in the &lt;a href="https://www.grinnell.edu/academics/libraries">Grinnell College (GC) Libraries&lt;/a>, and Grinnell&amp;rsquo;s &lt;a href="https://www.grinnell.edu/about/offices-services/its">Information Technology Services (ITS)&lt;/a> department. &lt;em>JekyllDev&lt;/em> was its name, and Jelkyll development was its intended purpose. Life and work quickly got in the way of interests, as they are apt to do, and &lt;em>JekyllDev&lt;/em> subsequently sat idle for nearly 2 years. During that span my work offered opportunities to learn about &amp;lsquo;DevOps&amp;rsquo; technologies like &lt;a href="https://www.ansible.com/">Ansible&lt;/a>, &lt;a href="https://www.vagrantup.com/">Vagrant&lt;/a>, &lt;a href="https://www.docker.com/">Docker&lt;/a>, and ultimately &lt;a href="https://docksal.io/">Docksal&lt;/a>.&lt;/p></description></item></channel></rss>