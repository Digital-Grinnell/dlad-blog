<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Htaccess on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/.htaccess/</link><description>Recent content in .Htaccess on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 14 Apr 2021 15:23:45 -0500</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/.htaccess/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding `.htaccess` to Apache Container `/tmp` Directory</title><link>https://static.grinnell.edu/dlad-blog/posts/105-adding-htaccess-to-apache-tmp-directory/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/105-adding-htaccess-to-apache-tmp-directory/</guid><description>&lt;p>For some time now we&amp;rsquo;ve had a problem lurking in &lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a>, when large files are opened for viewing or download one of the &lt;em>DG&lt;/em> services makes a temporary copy of the file in the &lt;em>Apache&lt;/em> container&amp;rsquo;s &lt;code>/tmp&lt;/code> directory. Locally, and in staging I&amp;rsquo;ve debugged the code that is responsible for removing the temporary file once the operation is complete. Running locally or in staging the process does its job, the temporary files get deleted soon after creation, but this never happens in production. The result, our root disk on the production server fills up after a few days of use, and the server stops serving content. Even more sinister, the server doesn&amp;rsquo;t crash and restart &amp;ndash; a condition that would also clear the offending &lt;code>/tmp&lt;/code> files &amp;ndash; it doesn&amp;rsquo;t even report a fatal error, it just refuses to serve content, which is really its only function. Very frustrating indeed!&lt;/p></description></item><item><title>301 Redirect in Digital.Grinnell</title><link>https://static.grinnell.edu/dlad-blog/posts/104-301-redirect-in-digital.grinnell/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/104-301-redirect-in-digital.grinnell/</guid><description>&lt;p>A colleague and I were recently sifting through the &lt;a href="https://digital.grinnell.edu">Digital.Grinnell&lt;/a> logs and came across some recurring 404, &amp;ldquo;page not found&amp;rdquo;, status messages. 404&amp;rsquo;s are not uncommon in &lt;em>DG&lt;/em>, but these were particularly troubling because they were requests of the form &lt;code>drupal/fedora/repository/grinnell:162&lt;/code> and &lt;code>drupal/fedora/repository/grinnell:86&lt;/code>. That&amp;rsquo;s the old, and by that I mean VERY OLD, like &lt;em>Drupal v6&lt;/em> vintage from 2012 or 2013, form for an object address. All such references were to some of &lt;em>DG&lt;/em>&amp;rsquo;s oldest digital objects, too.&lt;/p>
&lt;p>We tried to figure out where such old address references might be coming from, but we struck out. I wonder if it&amp;rsquo;s even possible to back-track a request like that given today&amp;rsquo;s &lt;a href="https://www.privacypolicies.com/blog/gdpr-privacy-policy/">GDPR&lt;/a> environment and related privacy practices?&lt;/p></description></item><item><title>Fixing 'Mixed Content' Errors</title><link>https://static.grinnell.edu/dlad-blog/posts/091-fixing-mixed-mode-errors/</link><pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/091-fixing-mixed-mode-errors/</guid><description>&lt;p>Last evening, just before the &lt;a href="https://en.wikipedia.org/wiki/Kansas_City_Chiefs">World Champion Kansas City Chiefs&lt;/a> kicked off the NFL&amp;rsquo;s 2020-21 season (I hope the season is healthy all the way into 2021), I attempted to update all the &lt;em>Drupal&lt;/em> contrib modules, and core, in my new &lt;a href="https://dg.localdomain">local instance of ISLE&lt;/a> as chronicled in the &lt;code>Next Steps&lt;/code> chapter of &lt;a href="https://static.grinnell.edu/dlad-blog/posts/090-isle-local-migration-customization/">ISLE Local Migration Customization&lt;/a>. Ultimately that update process left me with a host of incorrect owner/group/permissions issues in the &lt;em>Drupal&lt;/em> code, and I was able to remedy those in short order. But that left me with lots of remaining &amp;lsquo;&lt;a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content">mixed content&lt;/a>&amp;rsquo;, or &amp;lsquo;mixed mode&amp;rsquo;, errors.&lt;/p></description></item></channel></rss>