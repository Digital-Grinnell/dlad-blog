<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GnuPG on The Grinnell College Digital Library Application Developer's Blog</title><link>https://static.grinnell.edu/dlad-blog/tags/gnupg/</link><description>Recent content in GnuPG on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 27 Feb 2020 15:14:56 -0600</lastBuildDate><atom:link href="https://static.grinnell.edu/dlad-blog/tags/gnupg/index.xml" rel="self" type="application/rss+xml"/><item><title>Archiving What Git Ignores</title><link>https://static.grinnell.edu/dlad-blog/posts/066-archiving-what-git-ignores/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://static.grinnell.edu/dlad-blog/posts/066-archiving-what-git-ignores/</guid><description>I love git and GitHub, and I can certainly appreciate the usefullness of .gitignore, but there are times when I&amp;rsquo;d really like to move an ENTIRE project to a new home. I have in my head a process that might play out like this&amp;hellip;
Fetch a list of all the files and directories that .gitignore is ignoring. Pass that list to a tar or gzip command (maybe two of them) with encryption to create a secure, compressed archive. Commit the archive to the project repo in GitHub, or keep it in a safe place for restoration in the future.</description></item></channel></rss>