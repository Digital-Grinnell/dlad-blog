<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on The Grinnell College Digital Library Application Developer's Blog</title><link>/tags/git/</link><description>Recent content in git on The Grinnell College Digital Library Application Developer's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 27 Jan 2021 12:10:25 -0600</lastBuildDate><atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Submodule Tips</title><link>/posts/100-git-submodule-tips/</link><pubDate>Wed, 27 Jan 2021 12:10:25 -0600</pubDate><guid>/posts/100-git-submodule-tips/</guid><description>I seem to have a never-ending struggle with git submodules. Today, I need to add some new features to one of my submodules in a non-ISLE project, but I&amp;rsquo;ve elected to post this here because this blog is relatively easy to search. I also feel fortunate to have found Mastering Git Submodules from Christophe Porteneuve.
So, what I need to do now is update some submodule code, commit, and push that change back to its remote. I will also want to subsequentmly update a pair of projects that use the submodule so they are referencing the newest submodule code.</description></item><item><title>Changing Master to Main</title><link>/posts/101-changing-master-to-main/</link><pubDate>Tue, 26 Jan 2021 11:04:43 -0600</pubDate><guid>/posts/101-changing-master-to-main/</guid><description>In hindsight, this really should have been post number 100 in the blog, or perhaps it should have happened even earlier. In any event it&amp;rsquo;s high-time I made this move and captured the process. In June 2020 the good folks at GitHub announced that they would begin removing references to master as a small step forward in removing divisive language in tech. The change dictates that the default branch name of future repositories should be main in place of master.</description></item><item><title>Git Submodule Workflow in ISLE</title><link>/posts/098-git-submodule-workflow-in-isle/</link><pubDate>Mon, 07 Dec 2020 18:23:02 -0600</pubDate><guid>/posts/098-git-submodule-workflow-in-isle/</guid><description>In the past few days I&amp;rsquo;ve attempted to update the &amp;ldquo;staging&amp;rdquo; copy of Digital.Grinnell at https://dg-staging.grinnell.edu and learned a valuable lesson regarding workflow around Git and submodules. Specifically, I found the following resource to be most helpful:
https://intellipaat.com/community/9971/git-update-submodule-to-latest-commit-on-origin In case that post ever disappers, here&amp;rsquo;s the gist of it&amp;hellip;
The git submodule update command actually tells git that you simply want your submodules to each check out the commit already mentioned in the index of the superproject.
If you want to update your submodules to the most recent commit available from their remote, you&amp;rsquo;ll try this directly within the submodules.</description></item><item><title>Collaborating on Hugo Site Development</title><link>/posts/095-collaborating-on-hugo-site-development/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>/posts/095-collaborating-on-hugo-site-development/</guid><description>I&amp;rsquo;ve nearly completed migration of all Grinnell College Libraries' static sites to Azure and I&amp;rsquo;m updating this post to reflect that move. Wherever possible I&amp;rsquo;ll strike-through outdated information like this, and replace it with updated info.
This post will instruct the reader to install necessary tools and engage the workflow I now use to develop and maintain a handful of Hugo static websites. The list of sites now includes both professional, those owned and operated by Grinnell College, as well as &amp;ldquo;personal&amp;rdquo; sites that I develop, maintain and host myself.</description></item><item><title>Archiving What Git Ignores</title><link>/posts/066-archiving-what-git-ignores/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>/posts/066-archiving-what-git-ignores/</guid><description>I love git and GitHub, and I can certainly appreciate the usefullness of .gitignore, but there are times when I&amp;rsquo;d really like to move an ENTIRE project to a new home. I have in my head a process that might play out like this&amp;hellip;
Fetch a list of all the files and directories that .gitignore is ignoring. Pass that list to a tar or gzip command (maybe two of them) with encryption to create a secure, compressed archive. Commit the archive to the project repo in GitHub, or keep it in a safe place for restoration in the future.</description></item><item><title>How to Work with Git</title><link>/posts/056-how-to-work-with-git/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>/posts/056-how-to-work-with-git/</guid><description>Credits: This document is an abstraction of some fine documentation authored and posted by my ICG colleague and friend, David Keiser-Clark. ICG Git Workflow: How to work with Git The examples in this document use my work with the Islandora Collaboration Group&amp;rsquo;s (ICG) ISLE-Drupal-Build-Tools repository, as well as my fork and local clone of that repository. I recommend having a look at the GitHub Glossary for a list of terms used frequently in this post, and many of the referenced documents.</description></item><item><title>DG's ISLE Git Workflow</title><link>/posts/053-dgs-isle-git-workflow/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>/posts/053-dgs-isle-git-workflow/</guid><description>For some time now Digital.Grinnell has been using ISLE in production, with an instance that was built from a &amp;ldquo;non-standard&amp;rdquo; workflow, one that was a little different than the Git workflow established in the ISLE install docs. Consequently, DG&amp;rsquo;s situation is a little different than what&amp;rsquo;s documented for ISLE, so my mission here is to describe and execute the steps I&amp;rsquo;m taking to get back into the documented workflow.
The steps will involve and achieve the following:
Establish a working, local instance of my production DG site with an ISLE-1.</description></item><item><title>Building My `dg-islandora` Code Repository</title><link>/posts/038-building-my-dg-islandora-code-repository/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>/posts/038-building-my-dg-islandora-code-repository/</guid><description>As promised in post 037, this post combines elements of post 021 with updated post 034 to create a &amp;ldquo;customized&amp;rdquo; local ISLE instance with features of Digital.Grinnell. In this November 2019 update I&amp;rsquo;m building the repository on my MacBook ma7053 using ISLE-1.3.0. The target of this endeavor will be a properly populated Digital.Grinnell custom Islandora code repository featuring ISLE-1.3.0 code.
Process Overview I believe the process I need to engage here can be outlined like this:
Repeat or follow-up on post 034.</description></item></channel></rss>